spark-uri = null

sparknlp.settings.overrideConfigPath = "sparknlp.conf"

common {
  default-steps = [
    "all"
  ]
  output-format = "parquet"
  output = "gs://open-targets-pre-data-releases/21.06.3/output/literature-etl/parquet"

  publication-section-ranks = [
    {section: "title", rank: 1, weight: 1}
    {section: "abstract", rank: 2, weight: 0.8}
    {section: "concl", rank: 3, weight: 0.6}
    {section: "discuss,concl", rank: 3, weight: 0.6}
    {section: "discuss", rank: 4, weight: 0.5 }
    {section: "results", rank: 5, weight: 0.4 }
    {section: "results,discuss", rank: 5, weight: 0.4 }
    {section: "methods,results", rank: 6, weight: 0.3 }
    {section: "methods,concl", rank: 6, weight: 0.3 }
    {section: "methods,discuss", rank: 6, weight: 0.3 }
  ]
  // default rank 100, and weight 0.01
}

# this is a temporal lut for pmcid to pmid
# http://ftp.ebi.ac.uk/pub/databases/pmc/DOI/PMID_PMCID_DOI.csv.gz
processing {
  epmcids {
    format = "csv"
    path = "gs://open-targets-pre-data-releases/21.06.3/input/literature/PMID_PMCID_DOI.csv.gz"
    options = [
      {k: "header", v: "true"}
      {k: "inferSchema", v: "true"}
    ]
  }
  diseases {
    format = "parquet"
    path = "gs://open-targets-pre-data-releases/21.06.3/input/literature/parquet/diseases"
  }

  targets {
    format = "parquet"
    path = "gs://open-targets-pre-data-releases/21.06.3/input/literature/parquet/targets"
  }
  drugs {
    format = "parquet"
    path = "gs://open-targets-pre-data-releases/21.06.3/input/literature/parquet/molecule"
  }
  epmc {
    format = "json"
    path = "gs://otar025-epmc/21.06/**/"
  }
  outputs = {
    grounding = {
      format = ${common.output-format}
      path = ${common.output}"/grounding"
    }
    raw-evidence {
      format = ${common.output-format}
      path = ${common.output}"/rawEvidence"
    }
    cooccurrences {
      format = ${common.output-format}
      path = ${common.output}"/cooccurrences"
    }
    matches {
     format = ${common.output-format}
     path = ${common.output}"/matches"
    }
    literature-index {
      format = "json"
      path = ${common.output}"/literatureIndex"
    }
  }
}

embedding {
  num-synonyms = 50
  model-configuration {
    window-size = 5
    num-partitions = 8
    max-iter = 3
    min-count = 1
    step-size = 0.025
  }
  input = ${processing.outputs.matches}
  outputs = {
    wordvec {
     format = ${common.output-format}
     path = ${common.output}"/W2VModel"
    }
    wordvecsyn {
     format = ${common.output-format}
     path = ${common.output}"/W2VSynonyms"
    }
  }
}

vectors {
  input = ${embedding.outputs.wordvec.path}
  output {
    format = "json"
    path = ${common.output}"/vectors"
  }
}

evidence {
  threshold = 0.001
  inputs {
    model = ${embedding.outputs.wordvec.path}
    matches = ${processing.outputs.matches}
  }
  output {
    format = ${common.output-format}
    path = ${common.output}"/evidence"
  }
}